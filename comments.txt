# # @app.get("/")
# # def test():
# #     print('Hello World')
# class Test(BaseModel):
#     name: str
#     age: int
# @app.post("/")
# #here q is a querry not the body of post request
# async def test(t: Test,q :str):
#     print(t)
#     return 'Hello'
# #b '' represents bytes
#to run-> fastapi dev main.py

import uuid

import bcrypt
from fastapi import FastAPI, HTTPException, Request
from pydantic import BaseModel
from sqlalchemy import TEXT, VARCHAR, Column, LargeBinary, create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

#create instance of FastAPI
app = FastAPI()

DATABASE_URL='postgresql://postgres:vt24vikrant@localhost:5432/myuzikapp'


#acts as a starting point for SQL ACLCHEMY, cental point of database
engine=create_engine(DATABASE_URL)

#autocommit, transaction are not commited to database automatically
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)


#accessing database
db=SessionLocal()


class UserCreate(BaseModel):
    name: str
    email: str
    password: str

Base=declarative_base()

#model of User
class User(Base):
    __tablename__='users'

    id= Column(TEXT,primary_key=True)
    name = Column(VARCHAR(100))
    email = Column(VARCHAR(100))
    password = Column(TEXT)


@app.post('/signup')
def signup_user(user:UserCreate):
    #check if user already exists
    user_db=db.query(User).filter(User.email == user.email).first()

    if user_db:
        raise HTTPException(400,'User already exists!')
         
    
    hash_pw =bcrypt.hashpw(user.password.encode(),bcrypt.gensalt())
    user_db=User(id=str(uuid.uuid4()),email=user.email,password=hash_pw,name=user.name)
    #add user to DB
    db.add(user_db)
    db.commit()
    db.refresh(user_db)
    
    return user_db

Base.metadata.create_all(engine)